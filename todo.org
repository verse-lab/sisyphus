* Limitations
** Invariants hidden in external lemmas
An example of such a case would be when we're dealing with a proof
style that first reifies an OCaml computation with a Gallina model,
and uses their equivalence as an invariant. Then once evaluating the
lemma, the proof calls out to an external lemma to reduce the proof.
* Tasks for the PROOF GOD
** DONE Fix bug in translating programs
CLOSED: [2022-09-26 Mon 03:29]
** DONE Add unit test for translating programs
CLOSED: [2022-09-26 Mon 03:29]
** DONE Fix bug in proof parser
CLOSED: [2022-09-26 Mon 04:51]
** DONE Add regression test for proof parser
CLOSED: [2022-09-26 Mon 04:51]
** DONE Work out why proofs are failing
CLOSED: [2022-09-26 Mon 07:27]
** DONE Fix failing program parser
CLOSED: [2022-09-26 Mon 07:49]
** DONE configure code to only take branch for symexec higher order pure function when the spec itself is appropriate
CLOSED: [2022-09-26 Mon 09:18]
** DONE Implement CI
CLOSED: [2022-09-26 Mon 11:45]
** DONE Debug proof reduction to work out why it isn't expanding
CLOSED: [2022-09-27 Tue 02:08]
** DONE Update cmdliner to take in logical bindings
CLOSED: [2022-09-27 Tue 02:36]
** DONE Update tests to pass in logical bindings
CLOSED: [2022-09-27 Tue 02:36]
** DONE Work out way to fix for pure programs
CLOSED: [2022-09-27 Tue 08:02]
** TODO Implement logging system
** TODO Implement support for make_rev_list
** TODO You're the BEST around
* Tasks for the proof demigod
** TODO Add array of rev list
*** Make it build
** TODO Add benchmark test for array_of_rev list
** TODO How to handle HO loops?
*** Add xfor and xwhile [1 hr]
*** Rewrite array_of_rev_list using HO iterator
*** Define & prove specification for for-loop iterator (nat_fold_left)
*** Prove new program
** TODO Add modular tests
