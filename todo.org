#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00
* Limitations
** Invariants hidden in external lemmas
An example of such a case would be when we're dealing with a proof
style that first reifies an OCaml computation with a Gallina model,
and uses their equivalence as an invariant. Then once evaluating the
lemma, the proof calls out to an external lemma to reduce the proof.
* Tasks for the PROOF GOD
** DONE Read through SLING To work out why it outputs such poor invariants
CLOSED: [2022-10-06 Thu 06:53]
:PROPERTIES:
:Effort:   0:10
:END:
:LOGBOOK:
CLOCK: [2022-10-06 Thu 06:34]--[2022-10-06 Thu 06:53] =>  0:19
:END:
** DONE Update Dune file to work more nicely across projects
CLOSED: [2022-10-06 Thu 13:26]
:PROPERTIES:
:Effort:   1:00
:END:
:LOGBOOK:
CLOCK: [2022-10-06 Thu 07:41]--[2022-10-07 Fri 06:04] => 22:23
CLOCK: [2022-10-06 Thu 07:03]--[2022-10-06 Thu 07:30] =>  0:27
:END:
** TODO Work on array find map
:PROPERTIES:
:Effort:   4:00
:END:
*** DONE Prove array find map
CLOSED: [2022-10-07 Fri 04:10]
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2022-10-07 Fri 03:58]--[2022-10-07 Fri 04:10] =>  0:12
:END:
*** DONE Prove array find map new
CLOSED: [2022-10-07 Fri 05:48]
*** DONE Setup benchmark test for array find mapi
CLOSED: [2022-10-07 Fri 05:50]
*** DONE Add support for if then else
CLOSED: [2022-10-07 Fri 09:43]
*** TODO Fix unit tests
*** TODO Setup unit tests for array find mapi
:LOGBOOK:
CLOCK: [2022-10-07 Fri 06:04]
:END:
*** TODO Get array find map compiling on current code
*** TODO Hacker mode
** TODO Work on adding more examples
:PROPERTIES:
:Effort:   1:00
:END:
** TODO Update codebase to work with Coq.8.16.0
** TODO You're the BEST around
* Tasks for the proof demigod
** DONE Add array of rev list
CLOSED: [2022-09-27 Tue 16:35]
*** Make it build
** DONE Add benchmark test for array_of_rev list
CLOSED: [2022-09-27 Tue 17:02]
** TODO How to handle HO loops?
*** Add xfor and xwhile [1 hr]
*** Look through examples and find minimal set of combinators that capture all recursion
*** Rewrite array_of_rev_list using HO iterator
*** Define & prove specification for for-loop iterator (nat_fold_left)
*** Prove new program
** TODO Add modular tests
